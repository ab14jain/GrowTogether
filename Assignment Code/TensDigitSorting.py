from functools import cmp_to_key
class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):

        # sorted(A, key=lambda x: (x%10))

        # print(A)

        def sort_10place(a,b):
            str_a = str(a)
            str_b = str(b)

            tenthplace_a = len(str_a) > 1 and int(str_a[-2]) or 0
            tenthplace_b = len(str_b) > 1 and int(str_b[-2]) or 0

            if tenthplace_a < tenthplace_b:
                return -1
            elif tenthplace_a > tenthplace_b:
                return 1
            else:
                if a < b:
                    return 1
                elif a > b:
                    return -1
                else:
                    return 0

        A.sort(key=cmp_to_key(sort_10place))
        return A
    

s= Solution()
# print(s.solve([1, 2, 3, 4, 5])) #[5, 4, 3, 2, 1]
# print(s.solve([1, 2, 3, 4, 15])) #[15, 4, 3, 2, 1]
# print(s.solve([1, 2, 3, 4, 15, 25])) #[25, 15, 4, 3, 2, 1]
# print(s.solve([1, 2, 3, 4, 15, 25, 35])) #[35, 25, 15, 4, 3, 2, 1]
print(s.solve([7, 28, 26, 36, 63, 63, 77, 87, 93 ])) #[35, 25, 15, 4, 3, 2, 1]

# print(s.solve("908 903 809 801 700 608 602 600 506 506 504 503 502 309 209 209 205 204 109 102 100 5 911 910 819 813 810 718 716 715 715 711 618 616 616 612 611 510 417 414 413 315 314 313 118 117 15 12 927 829 827 824 823 729 722 722 628 627 625 426 422 421 420 328 229 222 127 124 121 939 936 838 831 830 737 732 637 632 630 539 537 534 531 531 435 435 433 238 237 232 137 136 135 33 949 946 944 848 847 841 749 740 649 649 646 540 447 442 349 348 344 342 245 245 245 242 241 241 240 148 145 145 142 46 44 40 957 956 952 859 857 851 758 753 753 655 654 653 559 555 554 552 454 359 354 353 259 258 251 158 156 154 154 59 57 965 962 866 866 860 764 763 760 663 661 660 569 560 467 467 466 463 369 368 366 366 365 364 362 360 360 268 262 261 167 69 68 68 66 66 66 61 60 979 976 879 872 871 779 776 776 775 774 770 675 573 470 470 379 378 378 370 278 173 170 72 71 989 888 888 888 882 785 784 781 685 685 587 586 583 483 482 389 389 385 383 284 281 187 183 182 181 89 89 86 84 998 992 992 992 896 892 890 799 699 693 693 593 593 494 493 396 394 298 298 294 291 290 197 194 193 99 99 99 98 95 95".split(" ")))
